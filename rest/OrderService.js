import ProductPersistence from "../persistence/ProductPersistence.js";
import OrderPersistence from "../persistence/OrderPersistence.js";
import IllegalArgumentError from "./IllegalArgumentError.js";

const EMPTY_ARGUMENT_ERR = "Body contains an empty argument!";
const NO_SUCH_PRODUCT_ERROR = "No such active product found";

class OrderService {
    #productPersistence;
    #orderPersistence;

    constructor() {
        this.#productPersistence = new ProductPersistence();
        this.#orderPersistence = new OrderPersistence();
    }

    async createOrder(order) {
        this.#assertNoEmptyArgs(order);
        await this.#assertProductIsActive(order.productId);
        return await this.#orderPersistence.create(this.#buildOrderObject(order));
    }

    async getOrderById(orderId) {
        return await this.#orderPersistence.getById(orderId);
    }

    async getAllOrders() {
        return await this.#orderPersistence.getAll();
    }

    async updateOrder(orderId, updatedOrder) {
        this.#assertNoEmptyArgs(updatedOrder);
        return await this.#orderPersistence.update(orderId, updatedOrder);
    }

    async deleteOrder(orderId) {
        await this.#orderPersistence.delete(orderId);
    }

    /**
     * @param {Order} product
     * Omits all the default values that must be
     * generated by the server: id, timestampCreated
     * @returns {JSON Object}
     */
    #buildOrderObject(order) {
        return {
            productId: order.productId,
            isAutomated: order.isAutomated,
            warehouseName: order.warehouseName,
            wareHouseLocation: order.wareHouseLocation,
        };
    }

    async #assertProductIsActive(productId) {
        let product;
        try {
            product = await this.#productPersistence.getById(productId);
        } catch (error) {
            throw new IllegalArgumentError(NO_SUCH_PRODUCT_ERROR);
        }
        if (!product.isActive) throw new IllegalArgumentError(NO_SUCH_PRODUCT_ERROR);
    }

    #assertNoEmptyArgs(order) {
        const { productId, warehouseName, wareHouseLocation } = order;
        const args = [productId, warehouseName, wareHouseLocation];
        if (args.some((value) => !value)) {
            throw new IllegalArgumentError(EMPTY_ARGUMENT_ERR);
        }
    }
}

export default OrderService;
